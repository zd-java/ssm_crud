package com.zd.crud.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.zd.crud.bean.Employee;
import com.zd.crud.bean.Msg;
import com.zd.crud.service.EmployeeService;

/**
 * 	处理员工CRUD请求
 * @author zd
 *
 */
@Controller
public class EmployeeController {

	@Autowired
	private EmployeeService employeeService;
	
	/**
	 *	 员工删除方法
	 *	单个批量二合一
	 *	批量删除：1-2-3
	 *	单个删除：1
	 *	
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/emp/{ids}",method=RequestMethod.DELETE)
	public Msg deleteEmpById(@PathVariable("ids") String ids) {
		//批量删除
		if(ids.contains("-")) {
			String[] str_ids = ids.split("-");
			//组装id的集合
			List<Integer> del_ids = new ArrayList<Integer>();
			for(String string : str_ids) {
				del_ids.add(Integer.parseInt(string));
			}
			employeeService.deleteBatch(del_ids);
		//单个删除
		}else {
			Integer id = Integer.parseInt(ids);
			employeeService.deleteEmpById(id);
		}
		return Msg.success();
	}
	
	/**
	 * 	如果直接发送ajax=PUT形式的请求
	 * 	封装的数据
	 * 	Employee [empId=1001, empName=null, gender=null, email=null, dId=null, department=null]
	 * 	
	 * 	问题：
	 * 	请求体中有数据；
	 * 	但是Employee方法封装不上；
	 * 	update tbl_emp	where emp_id = 1001
	 * 
	 * 	原因：
	 * 	Tomcat：
	 * 		1、将请求体中的数据，封装一个map。
	 * 		2、request.getparameter("empName")就会从这个map中取值。
	 * 		3、SpringMVC封装POJO对象的时候：
	 * 			会把POJO中每个属性的值，request.getParameter("email");
	 * 	AJAX发送PUT请求引发的血案：
	 * 		PUT请求，请求体中的数据，request.getparameter("empName")拿不到
	 * 		Tomcat一看是PUT就不会封装请求体中的数据为map，只有POST形式的请求才会封装请求体为map
	 * 
	 * 	解决方案：
	 * 	我们要能支持直接发送PUT之类的请求还要封装请求体中的数据
	 * 	1、配置上：HttpPutFormContentFilter
	 * 	2、它的作用：将请求体中的数据解析包装成一个map。
	 * 	3、request被重新包装，request.getParameter()被重写，就会从自己封装的map中取数据
	 * 
	 * 	员工更新方法
	 * @param employee
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/emp/{empId}",method=RequestMethod.PUT)
	public Msg saveEmp(Employee employee,HttpServletRequest request) {
		System.out.println("请求体中的数据："+request.getParameter("gender"));
		System.out.println("将要更新的员工数据："+employee);
		employeeService.updateEmp(employee);
		return Msg.success();
	}
	
	/**
	 * 	根据员工id查询员工信息
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/emp/{id}",method=RequestMethod.GET)
	public Msg getEmp(@PathVariable("id") Integer id) {
		Employee employee = employeeService.getEmp(id);
		return Msg.success().add("emp", employee);
	}
	
	/**
	 * 	检查用户名是否可用
	 * @param empName
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/checkUser")
	public Msg checkUser(@RequestParam("empName")String empName) {
		//先判断用户名是否是合法的表达式
		String regex = "(^[a-zA-Z0-9_-]{6,16}$)|(^[\\u2E80-\\u9FFF]{2,5}$)";
		if(!empName.matches(regex)) {
			return Msg.fail().add("va_msg", "用户名必须是6-16位数字和字母的组合或者2-5位中文");
		}
		
		//数据库用户名重复校验
		Boolean b = employeeService.checkUser(empName);
		if(b) {
			return Msg.success();
		}
		return Msg.fail().add("va_msg", "用户名重复");
	}
	
	/**
	 * 	员工保存
	 * 	1、支持JSR303校验
	 * 	2、导入Hibernate-Validator
	 * @param employee
	 * @return
	 */
	@RequestMapping(value="/emp",method=RequestMethod.POST)
	@ResponseBody
	public Msg saveEmp(@Valid Employee employee,BindingResult result) {
		if(result.hasErrors()) {
			//校验失败，应该返回失败，在模态框中显示校验失败的错误信息
			Map<String,Object> map = new HashMap<String,Object>();
			List<FieldError> errors = result.getFieldErrors();
			for(FieldError fieldError : errors) {
				System.out.println("错误的字段名："+fieldError.getField());
				System.out.println("错误信息："+fieldError.getDefaultMessage());
				map.put(fieldError.getField(), fieldError.getDefaultMessage());
			}
			return Msg.fail().add("errorFields", map);
		}else {
			employeeService.saveEmp(employee);
			return Msg.success();
		}
	}
	
	/**
	 * 	要使用@ResponseBody，需要导入Jackson包
	 * @param pn
	 * @return
	 */
	@RequestMapping("/emps")
	@ResponseBody
	public Msg getEmpsWithJson(@RequestParam(value="pn",defaultValue="1")Integer pn) {
		//这不是一个分页查询
		//引入PageHelper分页插件
		//在查询之前只需要调用PageHelper中的startPage方法，传入页码以及每页的大小
		PageHelper.startPage(pn, 5);
		//startPage后面紧跟的查询就是一个分页查询
		List<Employee> emps = employeeService.getAll();
		//使用PageInfo包装查询后的结果，只需要将pageInfo交给页面就行了
		//封装了详细的分页信息，包括有我们查询处理的数据，传入连续显示的页数
		PageInfo page = new PageInfo(emps,5);
		
		return Msg.success().add("pageInfo",page);
	}
	
	/**
	 * 	查询员工数据(分页查询)
	 * @return
	 */
//	@RequestMapping("/emps")
	public String getEmps(@RequestParam(value="pn",defaultValue="1")Integer pn,Model model) {
		//这不是一个分页查询
		//引入PageHelper分页插件
		//在查询之前只需要调用PageHelper中的startPage方法，传入页码以及每页的大小
		PageHelper.startPage(pn, 5);
		//startPage后面紧跟的查询就是一个分页查询
		List<Employee> emps = employeeService.getAll();
		//使用PageInfo包装查询后的结果，只需要将pageInfo交给页面就行了
		//封装了详细的分页信息，包括有我们查询处理的数据，传入连续显示的页数
		PageInfo page = new PageInfo(emps,5);
		model.addAttribute("pageInfo", page);
		
		return "list";
	}
	
}
